{
	"info": {
		"_postman_id": "58f71624-9f1d-4c84-912d-1c1f77df00eb",
		"name": "CTK-TMF638-ServiceInventory",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "d7a09cec-7dea-4055-82fb-26b1686f3660",
			"name": "TC_ServiceInventory_N0 - Preparation",
			"item": [
				{
					"_postman_id": "a9c8e64e-3f85-469e-bc35-68674a7e3198",
					"name": "Set ID's if not manually set on the envirionment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd59236d-9f6e-4464-9afa-2315ba1f9d6a",
								"type": "text/javascript",
								"exec": [
									"console.log(\"IDSI01 = \"+pm.globals.get(\"IDSI01\"));",
									"if (pm.globals.get(\"IDSI01\") === undefined && pm.response.to.have.status(200)){",
									"    var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"    if (Array.isArray(jsonData) && (jsonData.length > 1)) {",
									"        pm.globals.set(\"IDSI01\", jsonData[0].id);",
									"        pm.globals.set(\"IDSI02\", jsonData[1].id);",
									"        pm.test(\"IDSI01 and IDSI02 set\", function () {",
									"            return true;",
									"        });",
									"            ",
									"",
									"    ",
									"    }",
									"    else {",
									"        pm.test(\"An array with at least 2 elements is expected to run this tests, if your API can't return an Array, follow the documentation distributed togheter with this CTK and set the globals IDSI01 and IDSI02 manually\", function () {",
									"            pm.expect(0).to.eql(1)",
									"        });",
									"    }",
									"}",
									"    ",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								""
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "de61821c-d7a4-478d-87ad-6c3670e04563",
			"name": "TC_ServiceInventory_N1 â€“ Retrieve a service from its id",
			"item": [
				{
					"_postman_id": "88a65ae2-8dfe-481f-b073-49522e3a9552",
					"name": "Retrieve a Service by it's ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c7f2c8e-2aeb-4f3f-9830-3ceb6739ab05",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var instance = pm.response.json();",
									"",
									"var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"// Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"",
									"",
									"//The body of the response matches the values set in the original request",
									"",
									"pm.test('id is ' + pm.globals.get(\"IDSI01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"pm.test('name is set', function() {pm.globals.set('NAMESI01', instance.name); pm.expect(instance.name) == pm.globals.get(\"NAMESI01\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSI01', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\");});",
									"pm.test('state is set', function() {pm.globals.set('STATESI01', instance.state); pm.expect(instance.state) == pm.globals.get(\"STATESI01\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSI01', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\");});",
									"pm.test('startDate is set', function() {pm.globals.set('STARTDATESI01', instance.startDate); pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\");});",
									"",
									"//Service Specification sub-attributes.",
									"",
									"pm.test('serviceSpecification.id is set', function() {pm.globals.set('SERVICESPECIFICATION_IDSI01', instance.serviceSpecification.id); pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\");});",
									"",
									"//The Href can be different from server to server",
									"pm.test('serviceSpecification.href is set', function() {pm.globals.set('SERVICESPECIFICATION_HREFSI01', instance.serviceSpecification.href); pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\");});",
									"",
									"pm.test('serviceSpecification.version is set', function() {pm.globals.set('SERVICESPECIFICATION_VERSIONSI01', instance.serviceSpecification.version); pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\");});",
									"",
									"",
									"//Service Characteristic sub-attributes.",
									"var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"pm.test('serviceCharacteristic.valueType is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUETYPESI01', serviceCharacteristic.valueType); pm.expect(instance.serviceCharacteristic.valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\");});",
									"    ",
									"    ",
									"    ",
									"pm.test('serviceCharacteristic.value.@type is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUE_@TYPESI01', serviceCharacteristic.value['@type']); return true});",
									"pm.test('serviceCharacteristic.value.@schemaLocation is set', function() {pm.globals.set(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\",serviceCharacteristic.value['@schemaLocation']); pm.expect(serviceCharacteristic.value['@schemaLocation']).to.be.a('string');});",
									"",
									"",
									"//Service Relationship sub-attributes.",
									"var serviceRelationship = instance.serviceRelationship[0];",
									"",
									"pm.test('serviceRelationship type is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_TYPESI01\",serviceRelationship.type); pm.expect(serviceRelationship.type).to.be.a(\"string\");});",
									"",
									"pm.test('serviceRelationship service id is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_TYPESI01\", serviceRelationship.service.id); pm.expect(serviceRelationship.service.id) == pm.globals.get(\"SERVICERELATIONSHIP_TYPESI01\");});",
									"",
									"pm.test('serviceRelationship service href is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_SERVICE_HREFSI01\", serviceRelationship.service.href); pm.expect(serviceRelationship.service.href).to.be.a('string');});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/{{IDSI01}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								"{{IDSI01}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"_postman_id": "8c52d987-5e93-4b08-a734-64876ac4f3e1",
					"name": "Retrieve a Service by it's ID 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb0376b2-d43f-4f8d-b125-4d15673066b5",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var instance = pm.response.json();",
									"",
									"var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"// Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"",
									"",
									"//The body of the response matches the values set in the original request",
									"",
									"pm.test('id is ' + pm.globals.get(\"IDSI02\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI02\");});",
									"pm.test('name is set', function() {pm.globals.set('NAMESI02', instance.name); pm.expect(instance.name) == pm.globals.get(\"NAMESI02\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSI02', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI02\");});",
									"pm.test('state is set', function() {pm.globals.set('STATESI02', instance.state); pm.expect(instance.state) == pm.globals.get(\"STATESI02\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSI02', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI02\");});",
									"pm.test('startDate is set', function() {pm.globals.set('STARTDATESI02', instance.startDate); pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI02\");});",
									"",
									"//Service Specification sub-attributes.",
									"",
									"pm.test('serviceSpecification.id is set', function() {pm.globals.set('SERVICESPECIFICATION_IDSI02', instance.serviceSpecification.id); pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI02\");});",
									"",
									"//The Href can be different from server to server",
									"pm.test('serviceSpecification.href is set', function() {pm.globals.set('SERVICESPECIFICATION_HREFSI02', instance.serviceSpecification.href); pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\");});",
									"",
									"pm.test('serviceSpecification.version is set', function() {pm.globals.set('SERVICESPECIFICATION_VERSIONSI02', instance.serviceSpecification.version); pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\");});",
									"",
									"",
									"//Service Characteristic sub-attributes.",
									"var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"pm.test('serviceCharacteristic.valueType is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUETYPESI02', serviceCharacteristic.valueType); pm.expect(instance.serviceCharacteristic.valueType) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\");});",
									"    ",
									"    ",
									"    ",
									"pm.test('serviceCharacteristic.value.@type is set', function() {pm.globals.set('SERVICECHARACTERISTIC_VALUE_@TYPESI02', serviceCharacteristic.value['@type']); return true});",
									"pm.test('serviceCharacteristic.value.@schemaLocation is set', function() {pm.globals.set(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI02\",serviceCharacteristic.value['@schemaLocation']); pm.expect(serviceCharacteristic.value['@schemaLocation']).to.be.a('string');});",
									"",
									"",
									"//Service Relationship sub-attributes.",
									"var serviceRelationship = instance.serviceRelationship[0];",
									"",
									"pm.test('serviceRelationship type is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_TYPESI02\",serviceRelationship.type); pm.expect(serviceRelationship.type).to.be.a(\"string\");});",
									"",
									"pm.test('serviceRelationship service id is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_TYPESI02\", serviceRelationship.service.id); pm.expect(serviceRelationship.service.id) == pm.globals.get(\"SERVICERELATIONSHIP_TYPESI02\");});",
									"",
									"pm.test('serviceRelationship service href is set', function() {pm.globals.set(\"SERVICERELATIONSHIP_SERVICE_HREFSI02\", serviceRelationship.service.href); pm.expect(serviceRelationship.service.href).to.be.a('string');});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/{{IDSI02}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								"{{IDSI02}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			],
			"description": "This test case needs to have a service pre-existing already on the server side"
		},
		{
			"_postman_id": "1d1ef968-6f0a-42fd-8f88-a5274a55230a",
			"name": "TC_ServiceInventory_N2 â€“ Search for Service with specific characteristics",
			"item": [
				{
					"_postman_id": "f31f4d20-0f93-4657-aa6d-97b34569a8ae",
					"name": "Retrieve a list of services by one characteristic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b2630e-996b-4f05-bf51-c0db23757562",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category Service 1 must be equal to Category Service 2 if fail consult documentation\", function () {",
									"    return (pm.globals.get(\"CATEGORYSI01\") == pm.globals.get(\"CATEGORYSI02\"));",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"    pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"    pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"    pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"    pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"    ",
									"    ",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSI01\")){",
									"            ",
									"            //The body of the response matches the values set in the original request",
									"        ",
									"        pm.test('id is ' + pm.globals.get(\"IDSI01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI01\");});",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function() {pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\");});",
									"        pm.test('state is ' + pm.globals.get(\"STATESI01\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI01\");});",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function() {pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\");});",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function() {pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\");});",
									"        ",
									"        //Service Specification sub-attributes.",
									"        ",
									"        pm.test('serviceSpecification.id is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function() {pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\")});",
									"        ",
									"        //The Href can be different from server to server",
									"        pm.test('serviceSpecification.href is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function() {pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\");});",
									"        ",
									"        pm.test('serviceSpecification.version is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function() {pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\")});",
									"        ",
									"        ",
									"        //Service Characteristic sub-attributes.",
									"        var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"        pm.test('serviceCharacteristic.valueType is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function() {pm.expect(serviceCharacteristic.valueType) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@type is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\"), function() {pm.expect(serviceCharacteristic.value['@type']) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@schemaLocation is' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\"), function() {pm.expect(serviceCharacteristic.value['@schemaLocation']) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\");});",
									"        ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDSI02\")){",
									"        ",
									"              //The body of the response matches the values set in the original request",
									"        ",
									"         pm.test('id is ' + pm.globals.get(\"IDSI02\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI02\");});",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI02\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI02\");});",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI02\"), function() {pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI02\");});",
									"        pm.test('state is ' + pm.globals.get(\"STATESI02\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI02\");});",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI02\"), function() {pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI02\");});",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI02\"), function() {pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI02\");});",
									"        ",
									"        //Service Specification sub-attributes.",
									"        ",
									"        pm.test('serviceSpecification.id is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI02\"), function() {pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI02\")});",
									"        ",
									"        //The Href can be different from server to server",
									"        pm.test('serviceSpecification.href is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\"), function() {pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\");});",
									"        ",
									"        pm.test('serviceSpecification.version is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\"), function() {pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\")});",
									"        ",
									"        ",
									"        //Service Characteristic sub-attributes.",
									"        var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"        pm.test('serviceCharacteristic.valueType is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\"), function() {pm.expect(serviceCharacteristic.valueType) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\")});",
									"        pm.test('serviceCharacteristic.value.@type is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI02\"), function() {pm.expect(serviceCharacteristic.value['@type']) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI02\")});",
									"        pm.test('serviceCharacteristic.value.@schemaLocation is' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI02\"), function() {pm.expect(serviceCharacteristic.value['@schemaLocation']) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI02\");});",
									"        ",
									"    }",
									"   ",
									"  });",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/?category={{CATEGORYSI01}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "{{CATEGORYSI01}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"_postman_id": "827587d7-3243-4473-8495-82528061f51b",
					"name": "Retrieve a Filtered List with only one Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6192157-a527-40fe-b2ad-de1245a89f9a",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"    pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"    pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"    pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"    pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"    ",
									"    ",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSI01\")){",
									"            ",
									"            //The body of the response matches the values set in the original request",
									"        ",
									"        pm.test('id is ' + pm.globals.get(\"IDSI01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI01\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI01\");});",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI01\"), function() {pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI01\");});",
									"        pm.test('state is ' + pm.globals.get(\"STATESI01\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI01\");});",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI01\"), function() {pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI01\");});",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI01\"), function() {pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI01\");});",
									"        ",
									"        //Service Specification sub-attributes.",
									"        ",
									"        pm.test('serviceSpecification.id is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI01\"), function() {pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI01\")});",
									"        ",
									"        //The Href can be different from server to server",
									"        pm.test('serviceSpecification.href is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\"), function() {pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI01\");});",
									"        ",
									"        pm.test('serviceSpecification.version is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\"), function() {pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI01\")});",
									"        ",
									"        ",
									"        //Service Characteristic sub-attributes.",
									"        var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"        pm.test('serviceCharacteristic.valueType is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\"), function() {pm.expect(serviceCharacteristic.valueType) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@type is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\"), function() {pm.expect(serviceCharacteristic.value['@type']) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI01\")});",
									"        pm.test('serviceCharacteristic.value.@schemaLocation is' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\"), function() {pm.expect(serviceCharacteristic.value['@schemaLocation']) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI01\");});",
									"        ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDSI02\")){",
									"        ",
									"       pm.test('Service ID '+ pm.globals.get(\"IDSI02\")  +' was not supposed to be returned by this filtered search, you need to have services with 2 different states', function() {",
									"           pm.expect.fail();",
									"       });",
									"       ",
									"    }",
									"   ",
									"  });",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/?state={{STATESI01}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "state",
									"value": "{{STATESI01}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				},
				{
					"_postman_id": "5f9593aa-d61f-4f62-acbc-432dcd2c38c5",
					"name": "Retrieve a Filtered List with only one Service using name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e9c4224-1fad-48df-8ece-8f74a146a57c",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    var requiredAttributes = [ 'id','href','name','description','state','category','startDate','serviceRelationship','serviceCharacteristic'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"    // Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has description attribute', function() { pm.expect(instance.description).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"    pm.test('Response has category attribute', function() { pm.expect(instance.category).to.be.a('string'); });",
									"    pm.test('Response has startDate attribute', function() { pm.expect(instance.startDate).to.be.a('string'); });",
									"    pm.test('Response has note attribute', function() { pm.expect(instance.note) });",
									"    pm.test('Response has Service Relationship attribute', function() { pm.expect(instance.serviceRelationship).to.be.an.instanceOf(Array); });",
									"    ",
									"    ",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSI01\")){",
									"        ",
									"       pm.test('Service ID '+ pm.globals.get(\"IDSI01\")  +' was not supposed to be returned by this filtered search, you need to have services with 2 different names', function() {",
									"           pm.expect.fail();",
									"       });",
									"       ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDSI02\")){",
									"            ",
									"            //The body of the response matches the values set in the original request",
									"        ",
									"        pm.test('id is ' + pm.globals.get(\"IDSI02\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI02\");});",
									"        pm.test('name is ' + pm.globals.get(\"NAMESI02\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI02\");});",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSI02\"), function() {pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSI02\");});",
									"        pm.test('state is ' + pm.globals.get(\"STATESI02\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI02\");});",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSI02\"), function() {pm.expect(instance.category) == pm.globals.get(\"CATEGORYSI02\");});",
									"        pm.test('startDate is ' + pm.globals.get(\"STARTDATESI02\"), function() {pm.expect(instance.startDate) == pm.globals.get(\"STARTDATESI02\");});",
									"        ",
									"        //Service Specification sub-attributes.",
									"        ",
									"        pm.test('serviceSpecification.id is ' + pm.globals.get(\"SERVICESPECIFICATION_IDSI02\"), function() {pm.expect(instance.serviceSpecification.id) == pm.globals.get(\"SERVICESPECIFICATION_IDSI02\")});",
									"        ",
									"        //The Href can be different from server to server",
									"        pm.test('serviceSpecification.href is ' + pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\"), function() {pm.expect(instance.serviceSpecification.href) == pm.globals.get(\"SERVICESPECIFICATION_HREFSI02\");});",
									"        ",
									"        pm.test('serviceSpecification.version is ' + pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\"), function() {pm.expect(instance.serviceSpecification.version) == pm.globals.get(\"SERVICESPECIFICATION_VERSIONSI02\")});",
									"        ",
									"        ",
									"        //Service Characteristic sub-attributes.",
									"        var serviceCharacteristic = instance.serviceCharacteristic[0];",
									"        pm.test('serviceCharacteristic.valueType is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\"), function() {pm.expect(serviceCharacteristic.valueType) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUETYPESI02\")});",
									"        pm.test('serviceCharacteristic.value.@type is ' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI02\"), function() {pm.expect(serviceCharacteristic.value['@type']) === pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@TYPESI02\")});",
									"        pm.test('serviceCharacteristic.value.@schemaLocation is' + pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI02\"), function() {pm.expect(serviceCharacteristic.value['@schemaLocation']) == pm.globals.get(\"SERVICECHARACTERISTIC_VALUE_@SCHEMALOCATIONSI02\");});",
									"        ",
									"    }",
									"   ",
									"  });",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service?name={{NAMESI02}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMESI02}}"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "4ff3517e-0c3a-43d4-8eb3-cc215bb2495d",
			"name": "TC_ServiceInventoru_N3 â€“ Filtered retrieval of service data",
			"item": [
				{
					"_postman_id": "a989427b-f6c3-4c6e-bffd-d767e978e555",
					"name": "Filtered fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f06d4aaa-a425-4723-84a7-e0e4d4694f10",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/serviceOrdering/v3/serviceOrder",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"",
									"var requiredAttributes = [ 'id','name','state'];",
									"pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"//We expect only 2 fields",
									"",
									"pm.test('Instance has only filtered attributes', function() { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"",
									"// Checking all remaining possible attributes for ServiceOrder, taken from the Swagger file",
									"",
									"pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"",
									"pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string') });",
									"",
									"",
									"",
									"// Individualized tests",
									"if (instance.id == pm.globals.get(\"IDSI01\")){",
									"        ",
									"        //The body of the response matches the values set in the original request",
									"    ",
									"     pm.test('Service ID ' + pm.globals.get(\"IDSI01\") + ' was not supposed to be returned by this filtered search', function() {",
									"           pm.expect.fail();",
									"       });",
									"    ",
									"}",
									"if (instance.id == pm.globals.get(\"IDSI02\")){",
									"    ",
									"          //The body of the response matches the values set in the original request",
									"    ",
									"    //Expected Attributes",
									"    pm.test('name is ' + pm.globals.get(\"NAMESI02\"), function() {pm.expect(instance.name) == pm.globals.get(\"NAMESI02\");});",
									"    pm.test('state is ' + pm.globals.get(\"STATESI02\"), function() {pm.expect(instance.state) == pm.globals.get(\"STATESI02\");});",
									"    ",
									"    //Unexpected Attributes",
									"}",
									"  });",
									"}",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/{{IDSI02}}?fields=name,state",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								"{{IDSI02}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "name,state"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "d8a77e64-8d80-42c9-a968-4b590ac37bdf",
			"name": "TC_ServiceInventory_N4 â€“ Filtered Search and Filtered data response",
			"item": [
				{
					"_postman_id": "870f17d8-8ab9-4d6b-8c47-df69afe376b7",
					"name": "Filtered search by state and filtered fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f78374-79ad-4a05-98e2-62ee8a42814f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"      ",
									"      var requiredAttributes = [ 'id','href'];",
									"      pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"      //We expect only 2 fields",
									"      pm.test('Instance has only filtered attributes', function() { pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length) });",
									"      ",
									"      ",
									"      pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"      pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"      ",
									"      ",
									"      if (instance.id == pm.globals.get(\"IDSI01\")){",
									"          pm.test('id is ' + pm.globals.get(\"IDSI01\"), function() {pm.expect(instance.id) == pm.globals.get(\"IDSI01\");});",
									"      }",
									"      ",
									"      ",
									"      if (instance.id == pm.globals.get(\"IDSI02\")){",
									"        ",
									"        //The body of the response matches the values set in the original request",
									"        pm.test('Service ID' + pm.globals.get(\"IDSI02\") +' was not supposed to be returned by this filtered search', function() {",
									"           pm.expect.fail();",
									"       });",
									"    ",
									"}",
									"      ",
									"      ",
									"      ",
									"      ",
									"  });",
									"    ",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/?state={{STATESI01}}&fields=id,href",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								""
							],
							"query": [
								{
									"key": "state",
									"value": "{{STATESI01}}"
								},
								{
									"key": "fields",
									"value": "id,href"
								}
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "3133cdf4-b3ac-4f39-88db-782ba3309799",
			"name": "TC_ServiceInventory_E1 â€“ Unknown Service",
			"item": [
				{
					"_postman_id": "b8d0ef92-f4c9-48ab-9837-cef9df5f6462",
					"name": "Filtered search by state and filtered fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38f6bbe4-0a46-4416-8668-98f91bfedb34",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"OrangeBSS000\",\n  \"priority\": \"1\",\n  \"description\": \"Service order description\",\n  \"category\": \"CloudServiceOrdering\",\n  \"requestedStartDate\": \"2018-01-15T09:37:40.508Z\",\n  \"requestedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"orderDate\": \"2018-01-15T09:37:40.508Z\",\n  \"startDate\": \"2018-01-15T09:37:40.508Z\",\n  \"expectedCompletionDate\": \"2018-01-15T09:37:40.508Z\",\n  \"notificationContact\": \"email@domain.tld\",\n  \n  \"@type\": \"standard\",\n  \"orderItem\": [\n  {\n    \"id\": \"1\",\n    \"action\": \"add\",\n    \"@type\": \"standard\",\n    \"service\": {\n    \"serviceState\": \"Active\",\n    \"serviceCharacteristic\": [\n    {\n      \"name\": \"vCPE_IP\",\n      \"valueType\": \"String\",\n      \"value\": {\n        \"@type\": \"IPAddress\",\n        \"@schemaLocation\": \"http....\",\n        \"vCPE_IP\": \"193.218.236.21\"\n      }\n    }\n    ],\n    \"serviceSpecification\": {\n    \"id\": \"12\",\n    \"href\": \"http://...:serviceSpecification/12\",\n    \"name\": \"vCPE\",\n    \"version\": \"1\",\n    \"@type\": \"vCPE\",\n    \"@schemaLocation\": \"http...\"\n    }\n  }\n}\n  ]\n}"
						},
						"url": {
							"raw": "{{ServiceInventoryAPI}}/service/{{ID404}}",
							"host": [
								"{{ServiceInventoryAPI}}"
							],
							"path": [
								"service",
								"{{ID404}}"
							]
						},
						"description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n"
					},
					"response": []
				}
			]
		}
	]
}